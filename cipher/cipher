#!/usr/bin/env bash
# Author: Hakxcore https://github.com/hakxcore
currentVersion="2.1.4"
configuredClient=""

#colors
RED="$(printf '\033[31m')" GREEN="$(printf '\033[32m')" ORANGE="$(printf '\033[33m')" BLUE="$(printf '\033[34m')"
MAGENTA="$(printf '\033[35m')" CYAN="$(printf '\033[36m')" WHITE="$(printf '\033[37m')" BLACK="$(printf '\033[30m')" 
REDBG="$(printf '\033[41m')" GREENBG="$(printf '\033[42m')" ORANGEBG="$(printf '\033[43m')" BLUEBG="$(printf '\033[44m')", 
MAGENTABG="$(printf '\033[45m')" CYANBG="$(printf '\033[46m')" WHITEBG="$(printf '\033[47m')" BLACKBG="$(printf '\033[40m')"
RESETBG="$(printf '\e[0m')" BLINK="$(printf '\033[5;31m')"

##Platform Check
if [[ "$OSTYPE" == linux-android* ]]; then
  distro="termux"
  platform="Termux"
  prefix="/data/data/com.termux/files/"
  SUDO=""
fi

if [ -z "$distro" ]; then
  distro=$(ls /etc | awk 'match($0, "(.+?)[-_](?:release|version)", groups) {if(groups[1] != "os") {print groups[1]}}')
  platform="Debian"
  prefix=""
  SUDO="sudo"
fi

if [ -z "$distro" ]; then
  if [ -f "/etc/os-release" ]; then
    distro="$(source /etc/os-release && echo $ID)"
  elif [ "$OSTYPE" == "darwin" ]; then
    distro="darwin"
    platform="Darwin"
    prefix=""
    SUDO="sudo"
  else 
    distro="invalid"
  fi
fi


## This function determines which http get tool the system has installed and returns an error if there isn't one
getConfiguredClient()
{
  if  command -v curl &>/dev/null; then
    configuredClient="curl"
  elif command -v wget &>/dev/null; then
    configuredClient="wget"
  elif command -v http &>/dev/null; then
    configuredClient="httpie"                                            
  elif command -v fetch &>/dev/null; then
    configuredClient="fetch"                                             
  else
    echo "Error: This tool requires either curl, wget, httpie or fetch to be installed." >&2
    return 1
  fi
}


## This function determines weather python is intalled or not
getConfiguredPython()
{
  if command -v python3 &>/dev/null; then
    configuredPython="python3"
  elif  command -v python2 &>/dev/null; then
    configuredPython="python2"
  elif command -v python &>/dev/null; then
    configuredPython="python"
  else
    echo "Error: This tool requires python to be installed."
    return 1
  fi
}

#This function detrmines which version of python is installed
if [[ $(uname) != "Hakxcore" ]]; then
  python()
  {
    case "$configuredPython" in
      python3) python3 "$@" ;;
      python2) python2 "$@" ;;
      python)  python "$@" ;;
    esac
  }
fi

## Allows to call the users configured client without if statements everywhere
httpGet()
{
  case "$configuredClient" in
    curl)  curl -A curl -s "$@" ;;
    wget)  wget -qO- "$@" ;;
    httpie) http -b GET "$@" ;;
    fetch) fetch -q "$@" ;;
  esac
}

##This function determines the latest version of the termux-snippets if available and installs them
update()
{
  repositoryName="termux-snippets"
  githubUserName="hakxcore"
  nameOfInstallFile="install"
  latestVersion=$(curl -s https://api.github.com/repos/hakxcore/termux-snippets/tags | grep -Eo '"name":.*?[^\\]",'| head -1 | grep -Eo "[0-9.]+") #always grabs the tag without the v option
  if [[ $currentVersion == "" || $repositoryName == "" || $githubUserName == "" || $nameOfInstallFile == "" ]]; then
    echo "Error: update utility has not been configured correctly." >&2
    exit 1
  elif [[ $latestVersion == "" ]]; then
    echo "Error: no active internet connection" >&2
    exit 1
  else
    if [[ "$latestVersion" != "$currentVersion" ]]; then
      echo "Version $latestVersion available"
      echo -n "Do you wish to update $repositoryName [Y/n]: "
      read -r answer
      if [[ "$answer" == [Yy] ]]; then
        cd ~ || { echo 'Update Failed'; exit 1; }
        if [[ -d  ~/$repositoryName ]]; then rm -r -f $repositoryName || { echo "Permissions Error: try running the update again"; exit 1; } ; fi
        git clone "https://github.com/$githubUserName/$repositoryName" || { echo "Couldn't download latest version"; exit 1; }
        cd $repositoryName || { echo 'Update Failed'; exit 1; }
        git checkout "v$latestVersion" 2> /dev/null || git checkout "$latestVersion" 2> /dev/null || echo "Couldn't git checkout to stable release, updating to latest commit."
        $SUDO ./$nameOfInstallFile "update" || exit 1
        cd ..
        rm -r -f $repositoryName || { echo "Permissions Error: update succesfull but cannot delete temp files located at ~/$repositoryName delete this directory agian"; exit 1; }
      else
        exit 1
      fi
    else
      echo "$repositoryName is already the latest version"
    fi
  fi
}

##This function Checks for the insternet connectivity
checkInternet()
{
  httpGet github.com > /dev/null 2>&1 || { echo "Error: no active internet connection" >&2; return 1; } # query github with a get request
}

##Function for encryption
encryptText()
{
	echo -e "$GREEN---------(Cipher Text1)--------$RESETBG"
	echo $encrypt | sed 's/-e//' | base32
	echo -e "$GREEN-------------------------------$RESETBG"
	echo ""
	echo -e "$RED⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢$RESETBG"
	echo ""
	echo -e "$GREEN---------(Cipher Text2)--------$RESETBG"
	echo $encrypt | sed 's/-e//' | base64
	echo -e "$GREEN-------------------------------$RESETBG"
	echo -e "$RED⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢$RESETBG"
}

##Functon for decryption
decryptText()
{
	echo ""
	echo -e "$GREEN----(Decrypted with base32)----$RESETBG"
	echo $decrypt | base32 -d
	echo -e "$GREEN-------------------------------$RESETBG"
	echo ""
	echo -e "$RED⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢⬡⬢$RESETBG"
	echo ""
	echo -e "$GREEN----(Decrypted with base64)----$RESETBG"
	echo $decrypt | base64 -d
	echo -e "$GREEN-------------------------------$RESETBG"
}

##Usage and Help
usage()
{
  cat <<EOF
Cipher

Description: Encode and decode your text see examples below.

Usage: cipher [falgs] "your text to encode or decode"
  -e  Encode text
  -d  Decode text
  -u  Update Termux-snippets Tools
  -h  Show the help
  -v  Get the tool version

Examples:
  cipher -e <text to encode>
  cipher -d <text to decode>
EOF
}

##Options(flags)
while getopts "e:d:uvh" opt; do
  case "$opt" in
    \?) echo "Invalid option: -$OPTARG" >&2
        exit 1
        ;;
    h)  usage
        exit 0
        ;;
    v)  echo "Version $currentVersion"
        exit 0
        ;;
    u)
        getConfiguredClient || exit 1
        checkInternet || exit 1
        update
        exit 0
        ;;
    e)
	encrypt=$@
	encryptText || exit 1
	exit 0
	;;
    d)
	decrypt=$2
	decryptText || exit 1
	exit 0
	;;
  esac
done

##Driver
# special set of first arguments that have a specific behavior across tools
if [[ $# == "0" ]]; then
  usage ## if calling the tool with no flags and args chances are you want to return usage
  exit 0
elif [[ $# == "1" ]]; then
  if [[ $1 == "update" ]]; then
    getConfiguredClient || exit 1
    checkInternet || exit 1
    update || exit 1
    exit 0
  elif [[ $1 == "help" ]]; then
    usage
    exit 0
  fi
  else
        clear; echo "You shouldnt be here but maaaaaaybeee you slipped passed me, learn to use the tool!"; sleep 5; clear;
  usage
  exit 1
fi
