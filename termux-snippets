#!/usr/bin/env bash
# Author: hakxcore
declare -a tools=(cipher cheat covidinfo crypt cryptocurrency geo gif googler ipinfo jukebox lyrics meme movie news pwned qrify shodan shorturl todo transfer weather)
declare -a validTools=()
currentVersion="2.1.4"
configuredClient=""
RED="$(printf '\033[31m')"  GREEN="$(printf '\033[32m')"  ORANGE="$(printf '\033[33m')"  BLUE="$(printf '\033[34m')" 
MAGENTA="$(printf '\033[35m')"  CYAN="$(printf '\033[36m')"  WHITE="$(printf '\033[37m')"  BLACK="$(printf '\033[30m')"  
REDBG="$(printf '\033[41m')"  GREENBG="$(printf '\033[42m')"  ORANGEBG="$(printf '\033[43m')"  BLUEBG="$(printf '\033[44m')"  
MAGENTABG="$(printf '\033[45m')"  CYANBG="$(printf '\033[46m')"  WHITEBG="$(printf '\033[47m')"  BLACKBG="$(printf '\033[40m')" 
RESETBG="$(printf '\e[0m')"  BLINK="$(printf '\033[5;31m')"

if [[ "$OSTYPE" == linux-android* ]]; then
            distro="termux"
            platform="Termux"
            prefix="/data/data/com.termux/files/"
            showError="Try execute uninstall script again."
    fi

    if [ -z "$distro" ]; then
        distro=$(ls /etc | awk 'match($0, "(.+?)[-_](?:release|version)", groups) {if(groups[1] != "os") {print groups[1]}}')
        platform="Debian"
        prefix=""
        showError="Try running uninstall script again with root privileges."
    fi

    if [ -z "$distro" ]; then
        if [ -f "/etc/os-release" ]; then
            distro="$(source /etc/os-release && echo $ID)"
        elif [ "$OSTYPE" == "darwin" ]; then
            distro="darwin"
            platform="Darwin"
            prefix=""
            showError="Try running uninstall script again with root privileges."
        else 
            distro="invalid"
        fi
    fi
    

## This function determines which http get tool the system has installed and returns an error if there isnt one
getConfiguredClient()
{
  if  command -v curl &>/dev/null; then
    configuredClient="curl"
  elif command -v wget &>/dev/null; then
    configuredClient="wget"
  elif command -v http &>/dev/null; then
    configuredClient="httpie"
  elif command -v fetch &>/dev/null; then
    configuredClient="fetch"
  else
    echo "Error: This tool requires either curl, wget, httpie or fetch to be installed." >&2
    return 1
  fi
}

httpGet()
{
  case "$configuredClient" in
    curl)  curl -A curl -s "$@" ;;
    wget)  wget -qO- "$@" ;;
    httpie) http -b GET "$@" ;;
    fetch) fetch -q "$@" ;;
  esac
}

grablatestversion()
{
  repositoryName="termux-snippets"
  githubUserName="hakxcore"
  latestVersion=$(httpGet https://api.github.com/repos/$githubUserName/$repositoryName/tags | grep -Eo '"name":.*?[^\\]",'| head -1 | grep -Eo "[0-9.]+" ) #always grabs the tag without the v option
}

checkInternet()
{
  httpGet github.com > /dev/null 2>&1 || { echo ""$RED"Error: "$GREEN"no active internet connection$RESETBG" >&2; return 1; } # query github with a get request
}

header()
{
echo -e "$BOLD$GREEN\n\n                       -o          o-"
echo "                        +hydNNNNdyh+"
echo "                      +mMMMMMMMMMMMMm+"
echo "                     dMM"$RESETBG"m:"$BOLD$GREEN"NMMMMMMN"$RESETBG":m"$BOLD$GREEN"MMd"
echo "                                       "
echo "                    hMMMMMMMMMMMMMMMMMMh"
echo "                ..  yyyyyyyyyyyyyyyyyyyy  .."
echo "              .mMMm MMMMMMMMMMMMMMMMMMMM mMMm."
echo "              :MMMM-MMMMMMMMMMMMMMMMMMMM-MMMM:"
echo "              :MMMM-MMMMMMMMMMMMMMMMMMMM-MMMM:"
echo "              :MMMM-MMMMMMMMMMMMMMMMMMMM-MMMM:"
echo "              :MMMM-MMMMMMMMMMMMMMMMMMMM-MMMM: "
echo "              -MMMM-MMMMMMMMMMMMMMMMMMMM-MMMM-  "
echo "               +yy+ MMMMMMMMMMMMMMMMMMMM +yy+"
echo "                    mMMMMMMMMMMMMMMMMMMm"
echo "                    ^/++MMMMh++hMMMM++/^"
echo "                        MMMMo  oMMMM"
echo "                        MMMMo  oMMMM"
echo "                        oNMm-  -mMNs$RESETBG"
echo ""
 title="[Termux-snippets]"
  installver=""$BLUE"Installed Version:$RESETBG$GREEN $currentVersion"
  latestver=""$BLUE"Latest Version:$RESETBG$GREEN $latestVersion"
  printf "\t\t     $BLUE%s$RESETBG\n" "$title"
  printf "\t%s\t%s\n" "$latestver" "$installver"
}

toolMenu()
{
  while true; do
    clear
    header
    count=1
    for command in "${validTools[@]}"; do
      if [[ $count -gt 9 ]];then c=$count
      else c="0$count"; fi
      spaces=17
      echo -n -e "\t\t$BLUE[$c]$RESETBG"
      for (( i = 0 ; i < $spaces; i++)) ;do
        printf " "
      done
      echo "$command"
      count=$(( $count + 1 ))
    done
    echo -e -n "\t"$BLUE"Choose a tool or just press enter to go back:$RESETBG "
    read choice
    if [[ $choice == "" ]];then clear; header; break; fi
    echo -e -n "\tEnter any arguments you want to use with the tool: "
    read args
    clear
    if [[ $choice =~ [0-9] ]]; then ${validTools[$(($choice-1))]} $args
    else $choice $args; fi
    exit 0
  done
}

menu()
{
  while true; do
    echo -e "\t\t$BLUE[01]$RESETBG\t\t\tTools"
    echo -e "\t\t$BLUE[02]$RESETBG\t\t\tInstallation Check"
    echo -e "\t\t$BLUE[03]$RESETBG\t\t\tView man page"
    echo -e "\t\t$BLUE[04]$RESETBG\t\t\tUpdate"
    echo -e "\t\t$BLUE[05]$RESETBG\t\t\tGive Suggestion/Feedback"
    echo -e "\t\t$BLUE[06]$RESETBG\t\t\tDonate"
    echo -e "\t\t$BLUE[07]$RESETBG\t\t\tQuit"
    echo -e -n "\n\t"$BLUE"Choose an option:$RESETBG "
    read choice
    if [[ $choice -gt 7 || $choice -lt 1 ]];then
      echo "Error invalid option!"
      sleep 2
      clear
      header
      continue
    fi
    clear
    header
    if   [[ $choice -eq 1 ]];then toolMenu
    elif [[ $choice -eq 2 ]];then installationcheck
    elif [[ $choice -eq 3 ]];then man termux-snippets
    elif [[ $choice -eq 4 ]];then
      ${validTools[1]} -u
      sleep 2
      clear
      header
    elif [[ $choice -eq 5 ]];then 
	xdg-open https://forms.gle/gpuhX4uEWECjXUrT6
	sleep 2
	clear
	header
    elif [[ $choice -eq 6 ]];then
     clear
      echo -e "\tThanks for thinking of donating, that's pretty cool of you"
      echo -e "\n\t"$BLUE"Cryptocurrency Donation Addresses$RESETBG"
      echo -e "\t\t"$BLUE"BTC$RESETBG: bc1qyektg7utf0y5rse7f37uxpf7tahfgvdncl9m3r"
      echo -e "\t\t"$BLUE"ETH$RESETBG: 0xB32e133851fdee114BFa599b11A37C3742f0C997"
      echo -e "\t\t"$BLUE"BNB$RESETBG: bnb1f4stfh52cvkxtqsesasv3x4797g2aeamy6t30n\n"
      echo -e "\t"$BLUE"Normal Methods$RESETBG"
      echo -e "\t\t\t\t"$WHITEBG""$BLUE"G"$RED"O"$YELLOW"O"$BLUE"G"$GREEN"L"$RED"E "$GREEN"PAY$RESETBG"
      cat <<EOF
                █████████████████████████████████████████
                █████████████████████████████████████████
                ████ ▄▄▄▄▄ █▀█▀█ █ ▀ ██▄ ▄▄▄██ ▄▄▄▄▄ ████
                ████ █   █ █▀▀▀  █ ▄ ▀█▀▄▄▀█ █ █   █ ████
                ████ █▄▄▄█ █▀ ██▄▀▀▀█  █  █▄▀█ █▄▄▄█ ████
                ████▄▄▄▄▄▄▄█▄▀ █ █ ▀ █▄█ ▀ █ █▄▄▄▄▄▄▄████
                ████▄▄   █▄▄ ▄▀██▀▄▄▀▄▀ ▄█▄ ▄▄▀▄█ █▄▀████
                █████▄▀█ ▀▄█▀█▄▀▄█▀ ▄██▀▀▀▀▀▀▀ ██▄▀█▀████
                ████    ▄▄▄▄  ▄▀▄█▄█▀▄█ ▀▀█▀▄▄▀█▄▀█▀ ████
                ████ ▄▀   ▄ ▄▀▀██▄▀ ▄▄▄██  ▀  ██▀ ▀▀█████
                ████ █▄▀ ▄▄  ▀▀███▄▄▀ ▀▀ ▀▀▀█ ▀▄▄▄▀█ ████
                ██████ ▀ █▄▀▀█ ▀▄█▀▄▀█ ▀▀ ▄█▀▀▀█▀▀ ▄█████
                ████ ████▄▄ ▄▄▄▀▄▄▄▄█▄ ▀█▀▀▀▄▄▀▀▄█▀▀▀████
                ████ █  ▄▄▄▀ ▄ █▄▄ ▄██ █▄ ████▄▀█   █████
                ████▄█▄▄▄█▄▄▀▀▀▀█▀▄▄ ▀▀ ▀█▄▄ ▄▄▄ ▄█ ▀████
                ████ ▄▄▄▄▄ █▄▀ █▀█▀ ▄▄▄▀█▀   █▄█ ▄  ▀████
                ████ █   █ █ ▄  ██▄▄▀▄█▀▀█▄▀  ▄   ██▄████
                ████ █▄▄▄█ █  ▄▀▄█▄  ██▀▄▀▀ ▄█ ▀█ ▀▄█████
                ████▄▄▄▄▄▄▄█▄▄█▄▄█▄██▄██▄█▄▄▄▄▄▄█▄█▄█████
                █████████████████████████████████████████
                █████████████████████████████████████████
EOF
echo -e "\n\n\n\n\t\t\t\t\U1F446\n\n\n"
      header
    elif [[ $choice -eq 7 ]]; then clear; exit 0
    fi
  done
}

installationcheck()
{
  validTools=()
  for tool in "${tools[@]}"; do
    if [ -e "$prefix/usr/bin/$tool" ]; then
      check="$BLUE>$GREEN Snippets Installed Successfully.$RESETBG"
      state="["$GREEN"✔"$RESETBG"]";
      start=28;
      validTools+=($tool);
    else state="$RED✘$RESETBG"; start=28;
   	  check=""$REDBG"Warning:$RESETBG "$ORANGE"Snippets doesn't installed Correctly, Please try Install again.$RESETBG"
	fi
      if $1; then
        echo -n -e "\t\t$BLUE$tool$RESETBG"
        spaces=$(($start - $( echo $tool | wc -c)))
        for (( i = 0 ; i < $spaces; i++)) ;do
          printf " "
        done
        echo $state
      fi
  done

  if $1; then
  	echo -e -n "\n\t$check"
    echo -n -e "\n\t"$BLUE"Press enter to go back to the menu: $RESETBG"
    read
    clear
    header
  fi
}

##Driver
if [[ $# -eq 0 ]]; then
  clear
  checkInternet
  getConfiguredClient
  grablatestversion
  header
  installationcheck false
  echo
  menu
elif [[ $# -eq 1 ]]; then
  if [[ $1 == "-u" || $1 == "update" ]]; then
    installationcheck false
    $SUDO ${validTools[1]} -u
  elif [[ $1 == "-h" || $1 == "help" ]];then  man termux-snippets
  elif [[ $1 == "-v" ]]; then echo "Version $currentVersion"
  fi

fi
